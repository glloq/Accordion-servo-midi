#include "handController.h"

// === CONSTRUCTEUR ===
HandController::HandController(ServoController &servoCtrl, const ServoConfig *mapping, byte firstNote, byte numNotes)
    : servoController(servoCtrl), mapping(mapping), firstNote(firstNote), numNotes(numNotes) {}

// === VÃ‰RIFICATION DE LA NOTE ===
bool HandController::canPlay(byte note) {
    return (note >= firstNote && note < firstNote + numNotes);
}

// === ACTIVATION Dâ€™UNE NOTE ===
float HandController::noteOn(byte note, byte velocity) {
    int index = note - firstNote;
    const ServoConfig &config = mapping[index];

    // ðŸ”„ Ajustement de lâ€™angle dâ€™ouverture en fonction de `openDirection`
    uint16_t openAngle = config.openDirection ? (config.closedPosition - SERVO_OPEN_ANGLE) 
                                              : (config.closedPosition + SERVO_OPEN_ANGLE);

    servoController.setServoAngle(config.pcaAddress, config.channel, openAngle);
    return config.airFlowMultiplier;
}

// === DÃ‰SACTIVATION Dâ€™UNE NOTE ===
float HandController::noteOff(byte note) {
    int index = note - firstNote;
    const ServoConfig &config = mapping[index];

    // ðŸ”„ Fermeture Ã  lâ€™angle initial
    servoController.setServoAngle(config.pcaAddress, config.channel, config.closedPosition);
    return config.airFlowMultiplier;
}
